name: Vote Service CI/CD

on:
  push:
    branches: [ master ]

permissions:                # Required for OIDC
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Log in to Azure using OIDC
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3. Log in to ACR (OIDC-based, no username/password needed)
      - name: ACR Login
        run: az acr login --name myregistry   # <-- Replace with your ACR name only (no .azurecr.io)

      # 4. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          cd vote
          IMAGE=myregistry1993.azurecr.io/vote:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      # 5. Set AKS Context (OIDC-based)
      - name: AKS Login
        uses: azure/aks-set-context@v3
        with:
          # No need for creds JSON if OIDC is enabled
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          cluster-name: my-aks-cluster              # <-- Replace with your AKS cluster
          resource-group: SRINIVASA                 # <-- Replace with your resource group

      # 6. Deploy with kubectl (apply manifests)
      - name: Deploy Vote Service
        run: |
          IMAGE=myregistry.azurecr.io/vote:${{ github.sha }}
          kubectl set image deployment/vote vote=$IMAGE --record || true
          kubectl apply -f k8s/vote/deployment.yaml
          kubectl apply -f k8s/vote/service.yaml
